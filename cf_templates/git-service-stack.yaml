AWSTemplateFormatVersion: "2010-09-09"
Description: The template used to create an ECS Service from the ECS Console.

Parameters:
  ApplicationName:
    Type: String
    Description: Name of the application
    Default: git-service
  ContainerImage:
    Type: String
    Description: URI of the Docker container image
    Default: public.ecr.aws/e9q2h4z1/test/git-service:latest
  SubnetIDs:
    Type: CommaDelimitedList
    Default: 'subnet-08bec6d6fff616af2,subnet-00212c527d5d27f4c,subnet-06cb46832e612ab45'
  VpcID:
    Type: String
    Default: vpc-05ef4dad051a601ce

Resources:
  EcsCluster:
    Type: AWS::ECS::Cluster

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref ApplicationName
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: !Ref ApplicationName
          Image: !Ref ContainerImage
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster
      CapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Base: 0
          Weight: 1
      TaskDefinition: !Ref TaskDefinition
      SchedulingStrategy: REPLICA
      DesiredCount: 2
      LoadBalancers:
        - ContainerName: git-service
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup
      HealthCheckGracePeriodSeconds: '10'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets: !Ref SubnetIDs
          SecurityGroups:
            - !GetAtt SecurityGroups.GroupId
      PlatformVersion: LATEST
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      DeploymentController:
        Type: ECS
      ServiceConnectConfiguration:
        Enabled: false
      Tags: [ ]
      EnableECSManagedTags: true
    DependsOn:
      - Listener

  SecurityGroups:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SG for the Fargate ALB
      GroupName: git-service-sg
      SecurityGroupIngress:
        - CidrIpv6: ::/0
          FromPort: 80
          ToPort: 80
          IpProtocol: TCP
          Description: 'Inbound rule for IPv6 traffic'
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          IpProtocol: TCP
          Description: 'Inbound rule for IPv4 traffic'

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Name: git-service-lb
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt SecurityGroups.GroupId
      Subnets: !Ref SubnetIDs

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /actuator/health
      Name: git-service-tg
      Port: 80
      Protocol: HTTP
      TargetType: ip
      HealthCheckProtocol: HTTP
      VpcId: !Ref VpcID

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

Outputs:
  ECSService:
    Description: The created service.
    Value: !Ref ECSService
  LoadBalancer:
    Description: The created load balancer.
    Value: !Ref LoadBalancer
  Listener:
    Description: The created listener.
    Value: !Ref Listener
  TargetGroup:
    Description: The created target group.
    Value: !Ref TargetGroup
  LoadBalancerDNSName:
    Description: DNS name of the ALB
    Value: !GetAtt LoadBalancer.DNSName